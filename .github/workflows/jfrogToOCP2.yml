name: Jforg to OpenShift 2

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  # 🖊️ EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: "springproject1"
  PULL_SECRET_NAME: "jfrogtoken"
  APP_NAME: "ocp-test-1-1"

  APP_PORT: "8080"

  # 🖊️ EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  #IMAGE_REGISTRY: docker.io/karthiksekaran86
  #IMAGE_REGISTRY_USER: ${{ secrets.IMAGE_REGISTRY_USER }}
  #IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
  IMAGE_REGISTRY: trialxdxact.jfrog.io/test1-docker
  IMAGE_REGISTRY_USER: ${{ secrets.JFROG_USERNAME }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

  # 🖊️ EDIT to specify custom tags for the container image, or default tags will be generated below.
  #IMAGE_TAGS: ""
  IMAGE_TAGS: "trialxdxact.jfrog.io/test1-docker/ocp-test-1-1:5"

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
 # workflow_dispatch:
  push:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "main" ]

jobs:

  openshift-ci-cd:
    # 🖊️ Uncomment this if you are using CRDA scan step above1
    # needs: crda-scan
    name: Build and deploy to OpenShift 2
    runs-on: linux-run01
    #environment: dev

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`✅ All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v4

    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    # https://github.com/redhat-actions/buildah-build#readme
    - name: build the docker image
      id: build-image
      run: |
            ls -ltra            
            cd ocp1
            docker build . -f Dockerfile -t ocp-test-1-1:5

    - name: login to Jfrog
      id: jfrog-login
      run: |
            docker login trialxdxact.jfrog.io -u $IMAGE_REGISTRY_USER -p $IMAGE_REGISTRY_PASSWORD
         
    - name: tag docker image
      id: tag-docker-image
      run: |
            ppp=`pwd`
            echo "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ "$ppp
            ls -la 
            docker tag ocp-test-1-1:5 trialxdxact.jfrog.io/test1-docker/ocp-test-1-1:5

    - name: push docker image
      id: push-image
      run: |
            ls -la 
            docker push trialxdxact.jfrog.io/test1-docker/ocp-test-1-1:5
            echo "registry-path='trialxdxact.jfrog.io/test1-docker/ocp-test-1-1:5'" >> "$GITHUB_OUTPUT"
      
    # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4
        
    - name: Check path variables
      run: |
        echo "registry-path: "${{ steps.push-image.outputs.registry-path }}
        echo "APP_NAME: "${{ env.APP_NAME }}
        echo "OPENSHIFT_NAMESPACE: "${{ env.OPENSHIFT_NAMESPACE }}
        
    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
        openshift_token: ${{ env.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    # This step should create a deployment, service, and route to run your app and expose it to the internet.
    # https://github.com/redhat-actions/oc-new-app#readme
    #- name: Create and expose app
    #  id: deploy-and-expose
    #  uses: redhat-actions/oc-new-app@v1
    #  with:
    #    app_name: ${{ env.APP_NAME }}
    #    image: ${{ steps.push-image.outputs.registry-path }}
    #    namespace: ${{ env.OPENSHIFT_NAMESPACE }}
    #    port: ${{ env.APP_PORT }}
    #    build_env: |
    #        MY_ENV=MY_VALUE
    #    create_pull_secret_from: podman
    #    registry: trialxdxact.jfrog.io
    #    registry_username: ${{ env.IMAGE_REGISTRY_USER }}
    #    registry_password: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
    - name: Create and expose app
      id: deploy-and-expose  
      uses: ./
      with:
        app_name: ocp-test-1-1
        image: trialxdxact.jfrog.io/test1-docker/ocp-test-1-1:5
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}
        image_pull_secret_name: ${{ env.PULL_SECRET_NAME }}
        
    - name: Print application URL
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
